<?xml version="1.0" encoding="UTF-8"?>
<compositor>
	<!--
	This is a 2-pass blur approach taken from osgPPU. It was converted to use this
	new EffectCompositor infrastructure, but otherwise unmolested.
	-->

	<uniform name="radius" type="float"><value>10.0</value></uniform>
	<uniform name="sigma" type="float"><value>20.0</value></uniform>
	<uniform name="width" type="float"><value>512</value></uniform>
	<uniform name="height" type="float"><value>512</value></uniform>

	<shader name="blur-vert" type="vertex"><source><![CDATA[
	uniform float sigma;
	const float PI = 3.1415926535897;
	varying float sigma2;
	varying float c;
	void main(void) {
		gl_TexCoord[0] = gl_MultiTexCoord0;
		gl_Position = ftransform();
		sigma2 = 2.0 * sigma * sigma;
		c = sqrt((1.0 / (sigma2 * PI)));
	}
	]]>
	</source></shader>

	<shader name="blur-frag-x" type="fragment"><source><![CDATA[
	uniform sampler2D texUnit0;
	uniform float radius;
	uniform float sigma;
	varying float sigma2;
	varying float c;
	uniform float width;
	uniform float height;
	void main(void) {
		vec4 color = vec4(0.0);
		float totalWeight = 0.0;
		float inputTexTexelWidth = 1.0 / width;
		for(float i=-radius; i < radius; i += 1.0) {
			float weight = c * exp((i*i) / (-sigma2));
			totalWeight += weight;
			color += texture2D(texUnit0, gl_TexCoord[0].xy +  vec2(i * inputTexTexelWidth, 0) ) * weight;
		}
		color /= totalWeight;
		gl_FragColor = color;
	}
	]]></source></shader>

	<shader name="blur-frag-y" type="fragment"><source><![CDATA[
	uniform sampler2D texUnit0;
	uniform float radius;
	uniform float sigma;
	varying float sigma2;
	varying float c;
	uniform float width;
	uniform float height;
	void main(void) {
		vec4 color = vec4(0.0);
		float totalWeight = 0.0;
		float inputTexTexelWidth = 1.0 / height;
		for(float i=-radius; i < radius; i += 1.0) {
			float weight = c * exp((i*i) / (-sigma2));
			totalWeight += weight;
			color += texture2D(texUnit0, gl_TexCoord[0].xy +  vec2(0, i * inputTexTexelWidth) ) * weight;
		}
		color /= totalWeight;
		gl_FragColor = color;
	}
	]]></source></shader>

	<buffer_template name="bufferTemplate" type="2d">
		<internal_format>rgba</internal_format>
		<source_format>rgba</source_format>
		<source_type>ubyte</source_type>
	</buffer_template>

	<buffer name="scene" width="512" height="512" template="bufferTemplate" />
	<buffer name="scene-blur-x" width="512" height="512" template="bufferTemplate" />
	<!--<buffer name="scene-blur-y" width="512" height="512" template="bufferTemplate" />-->

	<pass_template name="passTemplate">
		<shader>blur-vert</shader>
		<uniform>radius</uniform>
		<uniform>sigma</uniform>
		<uniform>width</uniform>
		<uniform>height</uniform>
	</pass_template>

	<technique>
		<forward_pass name="original">
			<output_buffer target="color">scene</output_buffer>
			<!-- <output_buffer target="packed_depth_stencil" use_depth_stencil_ext="1" /> -->
		</forward_pass>
		
		<deferred_pass name="blur-x" template="passTemplate">
			<input_buffer unit="0" varname="texUnit0">scene</input_buffer>
			<output_buffer>scene-blur-x</output_buffer>
			<shader>blur-frag-x</shader>
		</deferred_pass>

		<deferred_pass name="blur-y" template="passTemplate">
			<input_buffer unit="0" varname="texUnit0">scene-blur-x</input_buffer>
			<!--<output_buffer>scene-blur-y</output_buffer>-->
			<shader>blur-frag-y</shader>
		</deferred_pass>
	</technique>
</compositor>

